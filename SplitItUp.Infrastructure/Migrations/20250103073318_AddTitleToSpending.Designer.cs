// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SplitItUp.Infrastructure;

#nullable disable

namespace SplitItUp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250103073318_AddTitleToSpending")]
    partial class AddTitleToSpending
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GroupPerson", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MembersId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("GroupPerson");
                });

            modelBuilder.Entity("SplitItUp.Domain.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SplitItUp.Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("SplitItUp.Domain.Spending", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PersonId");

                    b.ToTable("Spendings");
                });

            modelBuilder.Entity("SplitItUp.Domain.SpendingShare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<double>("PercentageOfSpending")
                        .HasColumnType("double precision");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Settled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SettledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SpendingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SpendingId");

                    b.ToTable("SpendingShares");
                });

            modelBuilder.Entity("GroupPerson", b =>
                {
                    b.HasOne("SplitItUp.Domain.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SplitItUp.Domain.Person", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SplitItUp.Domain.Spending", b =>
                {
                    b.HasOne("SplitItUp.Domain.Group", "Group")
                        .WithMany("Spendings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SplitItUp.Domain.Person", "Person")
                        .WithMany("Spendings")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SplitItUp.Domain.SpendingShare", b =>
                {
                    b.HasOne("SplitItUp.Domain.Person", "Person")
                        .WithMany("SpendingShares")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SplitItUp.Domain.Spending", "Spending")
                        .WithMany("SpendingShares")
                        .HasForeignKey("SpendingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Spending");
                });

            modelBuilder.Entity("SplitItUp.Domain.Group", b =>
                {
                    b.Navigation("Spendings");
                });

            modelBuilder.Entity("SplitItUp.Domain.Person", b =>
                {
                    b.Navigation("SpendingShares");

                    b.Navigation("Spendings");
                });

            modelBuilder.Entity("SplitItUp.Domain.Spending", b =>
                {
                    b.Navigation("SpendingShares");
                });
#pragma warning restore 612, 618
        }
    }
}
